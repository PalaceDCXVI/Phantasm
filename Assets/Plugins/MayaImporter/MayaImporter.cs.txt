using System.Collections.Generic;
using System.IO;
using UnityEngine;

//Used for importing light object information from a maya ascii file

//MODELLING RULES:
//ALL LIGHTS MUST START WITH typeLight
//ALL CURVES MUST START WITH curve
//NO OTHER OBJECTS MAY BEGIN WITH THE ABOVE

//Missing Features:
//

namespace MayaImporter
{
    public class Curve : MonoBehaviour
    {
        public Curve()
        {
            s = new Vector3(1, 1, 1);
        }
        public Vector3 t;
        public Vector3 s;
        public Vector3 r;
        public int numpoints;
        public List<Vector3> points;
        public string mayaname;
        public List<float> knot;
        public int order;
        public int cpStartIndex;
    }

    public class Light : MonoBehaviour
    {
        public Light()
        {
            s = new Vector3(1, 1, 1);
        }
        public Vector3 t;
        public Vector3 s;
        public Vector3 r;
        public string type;
        public string mayaname;
    }

    public class MayaImp : MonoBehaviour
    {
        int error;
        //string errors;

        public MayaImp()
        {
            error = 200;
        }

        ~MayaImp()
        {

        }

        string[] SplitString(string s)
        {
            return s.Split(new char[] { ' ', ',', ':', '\t', ';' });
        }

        Vector3 SplitStringToVec3(string[] s, int xind, int yind, int zind)
        {
            return new Vector3(float.Parse(s[xind]), float.Parse(s[yind]), float.Parse(s[zind]));
        }

        public List<Curve> ParseCurves(string filepath)
        {
            List<Curve> ret = new List<Curve>();
            StreamReader sr = new StreamReader(filepath);
            while (sr.Peek() >= 0)
            {
                string line = sr.ReadLine();
                if (line.Contains("createNode transform -n \"curve"))
                {
                    Curve c = new Curve();
                    c.points = new List<Vector3>();
                    c.knot = new List<float>();
                    //c.name = line.Substring(30, line.Length - 1);
                    bool done = false;
                    while (!done && sr.Peek() >= 0 && !(line = sr.ReadLine()).Contains("createNode transform -n"))
                    {
                        if (line.Contains("setAttr"))
                        {
                            string args = line.Substring(7);
                            if (args.Contains("\".t\""))
                            {
                                string[] segs = SplitString(args);
                                int numsegs = segs.Length;
                                c.t = SplitStringToVec3(segs, numsegs - 3, numsegs - 2, numsegs - 1);
                            }
                            else if (args.Contains("\".r\""))
                            {
                                string[] segs = SplitString(args);
                                int numsegs = segs.Length;
                                c.r = SplitStringToVec3(segs, numsegs - 3, numsegs - 2, numsegs - 1);
                            }
                            else if (args.Contains("\".s\""))
                            {
                                string[] segs = SplitString(args);
                                int numsegs = segs.Length;
                                c.s = SplitStringToVec3(segs, numsegs - 3, numsegs - 2, numsegs - 1);
                            }
                            else if (args.Contains("\".cc\""))
                            {
                                string line1 = sr.ReadLine(); //This line in the ma file confuses me, first number is the power
                                c.order = int.Parse(SplitString(line1)[0+2]);//split string isnt dropping tabs, must add 2 to all index checking
                                c.cpStartIndex = int.Parse(SplitString(line1)[1 + 2]);
                                string line2 = sr.ReadLine(); //index for interpolation
                                string[] ind = SplitString(line2);
                                int numind = int.Parse(ind[0 + 2]);
                                c.knot.Add(0);
                                for (int i = 1; i <= numind; i++)
                                {
                                    c.knot.Add(float.Parse(ind[i + 2]));
                                }
                                c.knot.Add(c.knot[c.knot.Count - 1]);
                                string line3 = sr.ReadLine(); //number of line points
                                c.numpoints = int.Parse(SplitString(line3)[0 + 2]);
                                for (int i = 0; i < c.numpoints; i++)
                                {
                                    c.points.Add(SplitStringToVec3(SplitString(sr.ReadLine()), 0 + 2, 1 + 2, 2 + 2));
                                }
                                sr.ReadLine(); //discard semicolon line
                                done = true;
                            }
                        }
                    }
                    ret.Add(c);
                }
            }
            sr.Dispose();
            return ret;
        }

        public List<Light> ParseLights(string filepath)
        {
            List<Light> ret = new List<Light>();
            StreamReader sr = new StreamReader(filepath);
            while (sr.Peek() >= 0)
            {
                bool light = false;
                Light c = new Light();
                string line = sr.ReadLine();
                if (line.Contains("createNode transform -n \"point"))
                {
                    light = true;
                    c.type = "point";
                }
                else if (line.Contains("createNode transform -n \"spot"))
                {
                    light = true;
                    c.type = "spot";
                }
                else if (line.Contains("createNode transform -n \"area"))
                {
                    light = true;
                    c.type = "area";
                }
                if (light)
                {
                    c.name = line.Substring(25, line.Length - 1);
                    while (sr.Peek() >= 0 && !(line = sr.ReadLine()).Contains("createNode transform -n"))
                    {
                        if (line.Contains("setAttr"))
                        {
                            string args = line.Substring(7);
                            if (args.Contains("\".t\""))
                            {
                                string[] segs = SplitString(args);
                                int numsegs = segs.Length;
                                c.t = SplitStringToVec3(segs, numsegs - 3, numsegs - 2, numsegs - 1);
                            }
                            else if (args.Contains("\".r\""))
                            {
                                string[] segs = SplitString(args);
                                int numsegs = segs.Length;
                                c.r = SplitStringToVec3(segs, numsegs - 3, numsegs - 2, numsegs - 1);
                            }
                            else if (args.Contains("\".s\""))
                            {
                                string[] segs = SplitString(args);
                                int numsegs = segs.Length;
                                c.s = SplitStringToVec3(segs, numsegs - 3, numsegs - 2, numsegs - 1);
                            }
                        }
                    }
                }
                ret.Add(c);
            }
            sr.Dispose();
            return ret;
        }

        //public Vector3 Interpolate(float t, int order, List<Vector3> points, List<float> knot, int cpStartIndex)
        //{
        //
        //
        //    return new Vector3(0, 0, 0);
        //}
        
        public Vector3 Interpolate(float t, int degree, List<Vector3> points, List<float> knots, int cpIndex)
        {
            //This function is a conversion of the following link into C#
            //https://github.com/thibauts/b-spline/blob/master/index.js
            
            int i, j, s, l;              // function-scoped iteration variables
            int n = points.Count;    // points count

            if (degree < 1) { print("Degree cannot be less than 1"); return new Vector3(0, 0, 0); }
            if (degree > (n - 1)) { print("Degree cannot be greater than the number of points"); return new Vector3(0, 0, 0); }
            if (knots.Count != n + degree + 1) { print("Number of knots must equal Points + Degree + 1"); return new Vector3(0, 0, 0); }

            int[] domain = { degree, knots.Count - 1 - degree };

            // remap t to the domain where the spline is defined
            float low = knots[domain[0]];
            float high = knots[domain[1]];
            t = t * (high - low) + low;

            if (t < low || t > high) { print("t value is out of range"); return new Vector3(0, 0, 0); }

            for (int k = 0; k < knots.Count; k++)
            {
                knots[k] /= knots[knots.Count - 1];
            }

            // find s (the spline segment) for the [t] value provided
            for (s = domain[0]; s < domain[1]; s++)
            {
                if (t >= knots[s] && t <= knots[s + 1])
                {
                    break;
                }
            }
            
            // l (level) goes from 1 to the curve degree + 1
            float alpha;
            for (l = 1; l <= degree + 1; l++)
            {
                // build level l of the pyramid
                for (i = s; i > s - degree - 1 + l; i--)
                {
                    alpha = (t - knots[i]) / (knots[i + degree + 1 - l] - knots[i]);

                    // interpolate each component
                    points[i] = (1 - alpha) * points[i] + alpha * points[i];
                }
            }
            return points[s];
        }

        public Vector3 Bezier(ref List<Vector3> vec, float t, int depth)
        {
            List<Vector3> v = new List<Vector3>();
            if (vec.Count > 1)
            {
                if (depth > 100)
                    return new Vector3();
                depth++;
                for (int i = 0; i < vec.Count - 1; i++)
                    v.Add(new Vector3((1 - t) * vec[i].x + t * vec[i+1].x,
                                      (1 - t) * vec[i].y + t * vec[i+1].y,
                                      (1 - t) * vec[i].z + t * vec[i+1].z));
                return Bezier(ref v, t, depth);
            }
            else
                return vec[0];
        }

        public int GetError()
        {
            int tmp = error;
            error = 200;
            return error;
        }

        //public string ErrorString(int error)
        //{
        //    if (error == 200)
        //        return "OK";
        //    return errors;
        //}
    }
}
